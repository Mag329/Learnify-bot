import logging
from typing import Optional

from aiogram import Bot, F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from octodiary.apis import AsyncMobileAPI
from octodiary.exceptions import APIError
from octodiary.urls import Systems
from datetime import datetime, timedelta
import aiohttp

import app.keyboards.user.keyboards as kb
from app.config.config import AWAIT_RESPONSE_MESSAGE, START_MESSAGE, SUCCESSFUL_AUTH, NO_SUBSCRIPTION_ERROR
from app.states.user.states import AuthState
from app.utils.database import AsyncSessionLocal, User, db, AuthData
from app.utils.user.utils import (
    ensure_user_settings,
    get_error_message_by_status,
    get_student,
    get_web_api,
    save_profile_data,
)
from app.utils.misc import check_subscription
from app.utils.user.api.mes.auth import get_token_expire_date, get_login_qr_code, check_qr_login, schedule_refresh
from app.utils.user.utils import deep_links


router = Router()
logger = logging.getLogger(__name__)


@router.message(CommandStart(deep_link=False))
@router.callback_query(F.data == 'check_subscription')
async def cmd_start(event: list[Message, CallbackQuery], bot: Bot, command: Optional[CommandStart] = None, state: Optional[FSMContext] = None):
    if isinstance(event, Message):
        user_id = event.from_user.id
        bot = event.bot
        message = event
        
        if command.args:
            return await deep_links(message, command.args, bot, state)
        
    elif isinstance(event, CallbackQuery):
        user_id = event.from_user.id
        bot = event.bot
        message = event.message
        await event.answer()
    else:
        return
    
    async with AsyncSessionLocal() as session:
        subscribe_status = await check_subscription(user_id, bot)
        if not subscribe_status:
            text= (
                "üì¢ <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b>\n\n"
                "‚ÑπÔ∏è –¢–∞–º –º—ã –ø—É–±–ª–∏–∫—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:\n"
                "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
                "‚öôÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞\n\n"
                "üö´ –ù–∏–∫–∞–∫–æ–π —Ä–µ–∫–ª–∞–º—ã ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚úÖ"
            )
            await message.answer(text=text, reply_markup=kb.check_subscribe)
            return
        
        result = await session.execute(
            db.select(User).filter_by(user_id=user_id)
        )
        user = result.scalar_one_or_none()

        if user and user.active:
            await_message = await message.answer(AWAIT_RESPONSE_MESSAGE)

            await ensure_user_settings(session, user_id)

            try:
                api, _ = await get_student(user_id)

                profile = None
                
                profile_id = (await api.get_users_profile_info())[0].id

                profile = await api.get_family_profile(profile_id=profile_id)

                user.profile_id = profile_id
                user.role = profile.profile.type
                user.person_id = profile.children[0].contingent_guid
                user.student_id = profile.children[0].id
                
                clients = await api.get_clients(user.person_id)
                
                user.contract_id = clients.client_id.contract_id

                await session.commit()
                
                result = await session.execute(db.select(AuthData).filter_by(user_id=user_id, auth_method='password'))
                auth_data: AuthData = result.scalar_one_or_none()
                
                if auth_data:
                    token = await api.refresh_token(auth_data.token_for_refresh, auth_data.client_id, auth_data.client_secret)
                    if token:
                        user.token = token
                        auth_data.token_for_refresh = api.token_for_refresh
                        need_update_date = await get_token_expire_date(api.token)
                        auth_data.token_expired_at = need_update_date
                        await session.commit()

                        schedule_refresh(user.user_id, need_update_date)
                        
                await save_profile_data(
                    session, user_id, profile.profile
                )

            except APIError as e:
                logger.error(
                    f"APIError ({e.status_code}) for user {user_id}: {e}"
                )

                await await_message.edit_text(
                    text=get_error_message_by_status(e.status_code),
                    reply_markup=kb.start_command,
                )
                return

            except Exception as e:
                logger.exception(
                    f"Unhandled exception for user {user_id}: {e}"
                )

                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                await await_message.edit_text(
                    text="‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    reply_markup=kb.start_command,
                )
                return

            await session.commit()

            await await_message.delete()

            await message.answer(
                text=SUCCESSFUL_AUTH.format(
                    profile.profile.last_name,
                    profile.profile.first_name,
                    profile.profile.middle_name,
                ),
                reply_markup=await kb.main(user_id),
            )

        else:
            if not user:
                user = User(user_id=user_id, active=False)
                session.add(user)
                await session.commit()
            
            await message.answer(
                text=START_MESSAGE,
                reply_markup=kb.start_command,
            )





@router.callback_query(F.data == 'choose_login')
async def choose_login_handler(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    
    text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n\n"
        "üë§ <b>1. –ü–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é</b> (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "  ‚Äî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ—Ç <a href='https://mos.ru'>mos.ru</a>\n"
        "  ‚Äî üîí –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ª–≥–æ\n\n"
        "üßæ <b>2. –ß–µ—Ä–µ–∑ —Ç–æ–∫–µ–Ω</b>\n"
        "  ‚Äî –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É\n"
        "  ‚Äî ‚è≥ –°–µ—Å—Å–∏—è –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ 10 –¥–Ω–µ–π\n\n"
        "üì∑ <b>3. –ß–µ—Ä–µ–∑ QR-–∫–æ–¥</b>\n"
        "  ‚Äî –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ <b>–ú–≠–®</b>\n"
        "  ‚Äî ‚è≥ –°–µ—Å—Å–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ —Å—Ä–æ–∫–æ–º –≤ 10 –¥–Ω–µ–π\n\n"
        "<i>‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –≤ –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∂–¥—ã–µ 10 –¥–Ω–µ–π </i>"
    )
    
    await callback.answer()
    await callback.message.answer(text, reply_markup=kb.choice_auth_variant, disable_web_page_preview=True)


@router.callback_query(F.data == "auth_with_login")
async def login_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text(
        text="‚ö° –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ <b>–ú–æ—Å–∫–æ–≤—Å–∫–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —à–∫–æ–ª—ã (–ú–≠–®)</b> –Ω–µ–æ–±—Ö–æ–¥–∏–º –ª–æ–≥–∏–Ω –æ—Ç <b>mos.ru</b>.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏:\n  - üë§ –õ–æ–≥–∏–Ω\n  - ‚úâÔ∏è Email\n  - üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7 –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)\n\n‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É –í–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–∏–≤—è–∑–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ –∞–∫–∫–∞—É–Ω—Ç—É mos.ru\n\n‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.",
        reply_markup=kb.back_to_choose_auth,
    )

    await state.update_data(main_message=callback.message.message_id)

    await state.set_state(AuthState.login)


@router.message(F.text, AuthState.login)
async def login_handler(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(login=message.text)

    data = await state.get_data()

    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=data["main_message"],
        text="üîí –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç <b>mos.ru</b>.\n\n‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ú—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–∏—Å—Ç–µ–º–µ <b>–ú–æ—Å–∫–æ–≤—Å–∫–æ–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π —à–∫–æ–ª—ã (–ú–≠–®)</b>",
        reply_markup=kb.back_to_choose_auth,
    )
    await message.delete()

    await state.set_state(AuthState.password)


@router.message(F.text, AuthState.password)
async def password_handler(message: Message, state: FSMContext, bot: Bot):
    await state.update_data(password=message.text)

    data = await state.get_data()

    if data["login"] and data["password"]:
        await message.delete()

        try:
            api = AsyncMobileAPI(system=Systems.MES)
            sms_code = await api.login(
                username=data["login"], password=data["password"]
            )
            await state.set_state(AuthState.sms_code_class)
            await state.update_data(sms_code_class=sms_code)
            await state.update_data(api_class=api)
            

            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data["main_message"],
                text=f"üì± –ù–∞ –≤–∞—à –Ω–æ–º–µ—Ä, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ <b>mos.ru</b>, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ SMS —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é",
                reply_markup=kb.back_to_choose_auth,
            )

        except APIError as e:
            logger.error(
                f"APIError ({e.status_code}) for user {message.from_user.id}: {e}"
            )
            await state.clear()

            await message.edit_text(
                text=get_error_message_by_status(e.status_code),
                reply_markup=kb.start_command,
            )

        except Exception as e:
            logger.exception(
                f"Unhandled exception for user {message.from_user.id}: {e}"
            )
            await state.clear()

            await bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=data["main_message"],
                text="‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                reply_markup=kb.start_command,
            )


@router.message(F.text, AuthState.sms_code_class)
async def sms_handler(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()

    if data["sms_code_class"]:
        await message.delete()
        await state.clear()

        sms_code_class = data["sms_code_class"]
        api = data["api_class"]
        async with AsyncSessionLocal() as session:
            try:
                token = await sms_code_class.async_enter_code(message.text)
                if token:
                    result = await session.execute(
                        db.select(User).filter_by(user_id=message.from_user.id)
                    )
                    user = result.scalar_one_or_none()
                    if not user:
                        user = User(user_id=message.from_user.id, token=token)
                        session.add(user)
                        await session.commit()

                    else:
                        user.token = token
                        await session.commit()

                    profile_info = await api.get_users_profile_info()

                    profile_id = profile_info[0].id

                    profile = await api.get_family_profile(profile_id=profile_id)

                    user.profile_id = profile_id
                    user.role = profile.profile.type
                    user.person_id = profile.children[0].contingent_guid
                    user.student_id = profile.children[0].id
                    
                    clients = await api.get_clients(user.person_id)
                    
                    user.contract_id = clients.client_id.contract_id
                    user.active = True
                    
                    await session.commit()
                    
                    result = await session.execute(
                        db.select(AuthData).filter_by(user_id=message.from_user.id)
                    )
                    auth_data = result.scalar_one_or_none()
                    if not auth_data:
                        auth_data = AuthData(user_id=message.from_user.id)
                        session.add(auth_data)
                        await session.commit()     
                    
                    need_update_date = await get_token_expire_date(api.token)
                    
                    auth_data.auth_method = "password"
                    auth_data.token_expired_at = need_update_date
                    auth_data.token_for_refresh = api.token_for_refresh
                    auth_data.client_id = api.client_id
                    auth_data.client_secret = api.client_secret

                    await session.commit()
                    
                    schedule_refresh(user.user_id, need_update_date)

                    await ensure_user_settings(session, message.from_user.id)

                    await save_profile_data(
                        session, message.from_user.id, profile.profile
                    )

                    await message.answer(
                        text=SUCCESSFUL_AUTH.format(
                            profile.profile.last_name,
                            profile.profile.first_name,
                            profile.profile.middle_name,
                        ),
                        reply_markup=await kb.main(message.from_user.id),
                    )

                else:
                    await state.clear()
                    await message.answer(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.",
                        reply_markup=kb.start_command,
                    )
                    return

            except APIError as e:
                logger.error(
                    f"APIError ({e.status_code}) for user {message.from_user.id}: {e}"
                )
                await state.clear()

                await message.edit_text(
                    text=get_error_message_by_status(e.status_code),
                    reply_markup=kb.start_command,
                )

            except Exception as e:
                logger.exception(
                    f"Unhandled exception for user {message.from_user.id}: {e}"
                )
                await state.clear()

                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=data["main_message"],
                    text="‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                    reply_markup=kb.start_command,
                )


@router.callback_query(F.data == "exit_from_account")
async def confirm_exit_from_account(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer('‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?', reply_markup=kb.confirm_exit)


@router.callback_query(F.data == "confirm_exit_from_account")
async def exit_from_account(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            db.select(User).filter_by(user_id=callback.from_user.id)
        )
        user = result.scalar_one_or_none()
        if user:
            user.active = False
            await session.commit()

            await callback.answer()
            await callback.message.edit_text(
                "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=kb.start_command
            )
        else:
            await callback.answer()
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞", reply_markup=kb.start_command
            )


@router.callback_query(F.data == "decline_exit_from_account")
async def decline_exit_from_account(callback: CallbackQuery):
    await callback.answer()
    await callback.message.delete()


@router.callback_query(F.data == "auth_with_token")
async def auth_by_token_callback_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AuthState.token)
    await state.update_data(main_message=callback.message.message_id)
    
    await callback.answer()
    text=(
        "üîê <b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ç–æ–∫–µ–Ω—É</b>\n\n"
        "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
        "2Ô∏è‚É£ –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç\n"
        "3Ô∏è‚É£ –í—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–æ–∫–µ–Ω–æ–º\n"
        "4Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å <code>eyJhb...</code>\n"
        "5Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç—É\n\n"
        "<i>‚è≥ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 10 –¥–Ω—è–º–∏. "
        "–î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é</i>"
    )
    
    await callback.message.answer(text, reply_markup=kb.token_auth)
    

@router.message(AuthState.token)
async def token_message_handler(message: Message, state: FSMContext, bot: Bot):
    token = message.text
    
    data = await state.get_data()
    if not data['main_message']:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            reply_markup=kb.start_command,
        )
    
    if not token.startswith('eyJhb'):
        return await bot.edit_message_text(
                    chat_id=message.chat.id,
                    message_id=data["main_message"],
                    text="‚ùå –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>eyJhb...</code>",
                    reply_markup=kb.token_auth,
                )
    
    await state.clear()
    
    token_expire_timestamp = await get_token_expire_date(token, 0)
    if token_expire_timestamp - datetime.now() < timedelta(hours=1):
        await message.answer(
            "‚ùå –¢–æ–∫–µ–Ω –∏—Å—Ç–µ—á—ë—Ç –º–µ–Ω—å—à–µ, —á–µ–º —á–µ—Ä–µ–∑ —á–∞—Å\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ —Å–∞–π—Ç <a href='https://mos.ru'>mos.ru</a>, –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
            reply_markup=kb.start_command,
        )
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(db.select(User).filter_by(user_id=message.from_user.id))
        user = result.scalar_one_or_none()
        
        result = await session.execute(
            db.select(AuthData).filter_by(user_id=message.from_user.id)
        )
        auth_data = result.scalar_one_or_none()
        if not auth_data:
            auth_data = AuthData(user_id=message.from_user.id)
            session.add(auth_data)
            await session.commit()
            
        user.token = token
        auth_data.auth_method = "token"
        auth_data.token_expired_at = await get_token_expire_date(token)
        auth_data.token_for_refresh = None
        auth_data.client_id = None
        auth_data.client_secret = None
        
        await session.commit()
    
        api, _ = await get_student(message.from_user.id, active=False)
        
        profile_info = await api.get_users_profile_info()

        profile_id = profile_info[0].id

        profile = await api.get_family_profile(profile_id=profile_id)

        user.profile_id = profile_id
        user.role = profile.profile.type
        user.person_id = profile.children[0].contingent_guid
        user.student_id = profile.children[0].id
        
        clients = await api.get_clients(user.person_id)
        
        user.contract_id = clients.client_id.contract_id
        user.active = True
        
        await session.commit()
        
        await ensure_user_settings(session, message.from_user.id)
        
        await save_profile_data(
            session, message.from_user.id, profile.profile
        )
        
        await message.answer(
            text=SUCCESSFUL_AUTH.format(
                profile.profile.last_name,
                profile.profile.first_name,
                profile.profile.middle_name,
            ),
            reply_markup=await kb.main(message.from_user.id),
        )
        
@router.callback_query(F.data == "auth_with_qr")
async def auth_by_qr_callback_handler(callback: CallbackQuery, state: FSMContext):
    async with aiohttp.ClientSession() as http_session:
        status, qr_code = await get_login_qr_code(http_session)
        if not status:
            await callback.answer()
            return await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", reply_markup=kb.delete_message)
            
        await callback.answer()
        text = (
                "üì≤ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR-–∫–æ–¥ –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ <b>–ú–≠–®</b> –¥–ª—è –≤—Ö–æ–¥–∞\n\n"
                "<i>‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: –¥–æ 5 –º–∏–Ω—É—Ç\n"
                "‚è≥ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω 10 –¥–Ω—è–º–∏. "
                "–î–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é</i>"
            )
        
        qr_code_message = await callback.message.answer_photo(qr_code, caption=text, reply_markup=kb.back_to_choose_auth)
        token = await check_qr_login(http_session)
        if not token:
            await qr_code_message.delete()
            await callback.message.answer("‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        
        async with AsyncSessionLocal() as session:
            result = await session.execute(db.select(User).filter_by(user_id=callback.from_user.id))
            user = result.scalar_one_or_none()
            
            result = await session.execute(
                db.select(AuthData).filter_by(user_id=callback.from_user.id)
            )
            auth_data = result.scalar_one_or_none()
            if not auth_data:
                auth_data = AuthData(user_id=callback.from_user.id)
                session.add(auth_data)
                await session.commit()
                
            user.token = token
            auth_data.auth_method = "qr"
            auth_data.token_expired_at = await get_token_expire_date(token)
            auth_data.token_for_refresh = None
            auth_data.client_id = None
            auth_data.client_secret = None
            
            await session.commit()
            
            api, _ = await get_student(callback.from_user.id, active=False)
        
            profile_info = await api.get_users_profile_info()

            profile_id = profile_info[0].id

            profile = await api.get_family_profile(profile_id=profile_id)

            user.profile_id = profile_id
            user.role = profile.profile.type
            user.person_id = profile.children[0].contingent_guid
            user.student_id = profile.children[0].id
            
            clients = await api.get_clients(user.person_id)
            
            user.contract_id = clients.client_id.contract_id
            user.active = True
            
            await session.commit()
            
            await ensure_user_settings(session, callback.from_user.id)
            
            await save_profile_data(
                session, callback.from_user.id, profile.profile
            )
            
            await qr_code_message.delete()
            
            await callback.message.answer(
                text=SUCCESSFUL_AUTH.format(
                    profile.profile.last_name,
                    profile.profile.first_name,
                    profile.profile.middle_name,
                ),
                reply_markup=await kb.main(callback.from_user.id),
            )