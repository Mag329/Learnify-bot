from datetime import datetime, timedelta
import logging
from sqlalchemy.orm import selectinload
from learnifyapi.client import LearnifyAPI
from learnifyapi.exceptions import APIError

import app.keyboards.user.keyboards as kb
from app.config.config import LEARNIFY_API_TOKEN
from app.utils.database import (AsyncSessionLocal, Gdz, PremiumSubscription, PremiumSubscriptionPlan,
                                User, db)
from app.utils.user.decorators import handle_api_error
from app.utils.scheduler import scheduler


logger = logging.getLogger(__name__)


@handle_api_error()
async def get_user_info(user_id):
    async with AsyncSessionLocal() as session:
        result = await session.execute(db.select(User).filter_by(user_id=user_id))
        user = result.scalar_one_or_none()

        if not user:
            return None
        
        async with LearnifyAPI(token=LEARNIFY_API_TOKEN) as api:
            try:
                info = await api.get_user(user_id)
            except APIError as e:
                info = None
                
            return info
        
        
async def create_subscription(session, user_id, plan, premium_user):
    try:
        result = await session.execute(db.select(User).filter_by(user_id=user_id))
        user = result.scalar_one_or_none()
        if not user:
            logger.warning(f"[create_subscription] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
            return None, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"

        if not plan:
            logger.error(f"[create_subscription] –ù–µ –ø–µ—Ä–µ–¥–∞–Ω —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω (user_id={user_id})")
            return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω"

        if not premium_user:
            logger.warning(f"[create_subscription] PremiumSubscription –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è {user_id}")
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        now = datetime.now()
        duration = timedelta(days=plan.duration)

        if premium_user.is_active and premium_user.expires_at:
            premium_user.expires_at += duration
            logger.info(f"[create_subscription] –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: +{plan.duration} –¥–Ω–µ–π –¥–ª—è {user_id}, –∏—Å—Ç–µ–∫–∞–µ—Ç {premium_user.expires_at}")
        else:
            premium_user.expires_at = now + duration
            premium_user.is_active = True
            logger.info(f"[create_subscription] –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {user_id}\n–ü–ª–∞–Ω: {plan.name}\n–¶–µ–Ω–∞: {plan.price}\n–ò—Å—Ç–µ–∫–∞–µ—Ç: {premium_user.expires_at}")

        premium_user.plan = plan.id
        await session.commit()

        # –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Learnify API
        async with LearnifyAPI(token=LEARNIFY_API_TOKEN) as api:
            try:
                result = await api.create_user(
                    user_id=user_id,
                    expires_at=premium_user.expires_at
                )
            except APIError as e:
                if e.status_code == 400:
                    logger.debug(f"[create_subscription] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ API ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º")
                    result = await api.update_user(
                        user_id=user_id,
                        expires_at=premium_user.expires_at,
                        is_active=True
                    )
                else:
                    logger.exception(f"[create_subscription] –û—à–∏–±–∫–∞ API Learnify –¥–ª—è user_id={user_id}: {e}")
                    return None, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"

        logger.info(f"[create_subscription] ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: user_id={user_id}\n–ü–ª–∞–Ω: {plan.name}\n–¶–µ–Ω–∞: {plan.price}\n–ò—Å—Ç–µ–∫–∞–µ—Ç: {premium_user.expires_at}")
        return result, None

    except Exception as e:
        await session.rollback()
        logger.exception(f"[create_subscription] –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è user_id={user_id}: {e}")
        return None, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
    
    
async def disable_subscription(user_id):
    async with AsyncSessionLocal() as session:
        result = await session.execute(db.select(PremiumSubscription).filter_by(user_id=user_id))
        user = result.scalar_one_or_none()

        if not user:
            return None
        
        async with LearnifyAPI(token=LEARNIFY_API_TOKEN) as api:
            try:
                result = await api.deactivate_subscription(user_id)
            except APIError as e:
                result = None
                
            return True if result else False
    
    
@handle_api_error()
async def get_gdz_answers(user_id, task, subject_id):
    if not subject_id:
        return None, None
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(db.select(Gdz).filter_by(user_id=user_id, subject_id=subject_id))
        gdz_info = result.scalar_one_or_none()
        
    try:
        async with LearnifyAPI(token=LEARNIFY_API_TOKEN) as api:
            gdz = await api.get_gdz_answers(
                user_id=user_id, 
                task_text=task, 
                book_url=gdz_info.book_url, 
                search_by=gdz_info.search_by
            )
    except Exception as e:
        logger.exception(f"[get_gdz_answers] –û—à–∏–±–∫–∞ Learnify API: {e}")
        return None, None
        
    main_text = (
        f'üß† <b>–ê–≤—Ç–æ-–≥–¥–∑:</b>\n\n'
        f'üìñ <b>–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:</b>\n <code>{gdz.task_text}</code>\n\n'
    )
    
    title_map = {
        "pages": "–°—Ç—Ä–∞–Ω–∏—Ü–∞",
        "numbers": "–ó–∞–¥–∞–Ω–∏–µ",
        "paragraphs": "–ü–∞—Ä–∞–≥—Ä–∞—Ñ"
    }
    title_label = title_map.get(gdz_info.search_by, "–ó–∞–¥–∞–Ω–∏–µ")
    
    solutions = []
    for solution in getattr(gdz, "solutions", []):
        text = (
            f'üìò <b>{title_label} {solution.page_number}</b>\n\n'
            f'üîó <a href="{solution.answer_url}">–°—Å—ã–ª–∫–∞ –Ω–∞ –ì–î–ó</a>\n\n'
        )
        solutions.append(
            {
                "text": text,
                "images": getattr(solution, "image_urls", [])
            }
        )
        
        if not solutions:
            logger.info(f"[get_gdz_answers] –†–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã (user_id={user_id}, subject_id={subject_id}, task='{task}')")
            return (
                main_text + "‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ç–≤–µ—Ç—ã –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–¥–∞–Ω–∏—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòî",
                []
            )
        
    return main_text, solutions


async def renew_subscription(user_id, bot):
    async with AsyncSessionLocal() as session:
        try:
            result = await session.execute(
                db.select(PremiumSubscription)
                .options(selectinload(PremiumSubscription.plan_obj))
                .filter_by(user_id=user_id, is_active=True)
            )
            subscription = result.scalar_one_or_none()

            if not subscription:
                logger.warning(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–ª—è user_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞.")
                return

            plan = subscription.plan_obj
            if not plan:
                logger.error(f"–¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ user_id={user_id} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                return

            if subscription.auto_renew and subscription.balance >= plan.price:
                result, error = await create_subscription(
                    session=session,
                    user_id=user_id,
                    plan=plan,
                    premium_user=subscription
                )

                if not error:
                    subscription.balance -= plan.price
                    subscription.expires_at = result.expires_at.replace(tzinfo=None)
                    await session.commit()

                    text = (
                        "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n"
                        f"üóìÔ∏è –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <i>{subscription.expires_at.strftime('%H:%M %d.%m.%Y')}</i>\n"
                        f"üí≥ –ë–∞–ª–∞–Ω—Å: <b>{subscription.balance:.0f} ‚≠êÔ∏è</b>\n\n"
                        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞–µ—Ç–µ—Å—å —Å Learnify ‚ù§Ô∏è"
                    )

                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ user_id={user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ {subscription.expires_at}.")

                    await schedule_renew_subscription(subscription.user_id, subscription.expires_at, bot)

                else:
                    text = (
                        "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                        f"<i>{error}</i>"
                    )
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ user_id={user_id}: {error}")

            else:
                success = await disable_subscription(user_id)

                if success:
                    reason = (
                        "üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è"
                        if subscription.auto_renew else
                        "‚öôÔ∏è –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ"
                    )
                    text = (
                        "‚ùå <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫</b>\n\n"
                        f"{reason}\n"
                        f"üí≥ –ë–∞–ª–∞–Ω—Å: {subscription.balance:.0f} ‚≠êÔ∏è"
                    )
                    logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ user_id={user_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")
                else:
                    text = (
                        "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                        "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"
                    )
                    logger.error(f"–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É user_id={user_id}.")

            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=text,
                    reply_markup=kb.delete_message
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        except Exception as e:
            await session.rollback()
            logger.exception(f"–û—à–∏–±–∫–∞ –≤ renew_subscription –¥–ª—è user_id={user_id}: {e}")


async def schedule_renew_subscription(user_id: int, expires_at: datetime, bot):
    job_id = f"renew_subscription_{user_id}"
    if expires_at < datetime.now():
        await renew_subscription(user_id, bot)
    else:
        scheduler.add_job(
            renew_subscription,
            "date",
            run_date=expires_at,
            args=[user_id, bot],
            id=job_id,
            replace_existing=True,
        )


async def delete_renew_subscription_task(user_id):
    job_id = f"renew_subscription_{user_id}"

    try:
        scheduler.remove_job(job_id)
    except:
        pass


async def restore_renew_subscription_jobs(bot):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            db.select(PremiumSubscription).filter_by(is_active=True)
        )
        users = result.scalars().all()
        for user in users:
            await schedule_renew_subscription(user.user_id, user.expires_at, bot)
