import random
from datetime import datetime

import phonenumbers
from aiogram import Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.media_group import MediaGroupBuilder
from octodiary.apis import AsyncMobileAPI, AsyncWebAPI
from octodiary.urls import Systems

import app.keyboards.user.keyboards as kb
from app.config.config import (ERROR_408_MESSAGE, ERROR_500_MESSAGE,
                               ERROR_MESSAGE)
from app.utils.database import (AsyncSessionLocal, Gdz, Homework,
                                PremiumSubscription, SettingDefinition,
                                Settings, User, UserData, db)
from app.utils.user.decorators import handle_api_error

EMOJI_SUBJECTS = {
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) —è–∑—ã–∫": "üá¨üáß",
    "–ê–ª–≥–µ–±—Ä–∞": "‚ûó",
    "–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞": "‚ûó",
    "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "üìä",
    "–ì–µ–æ–º–µ—Ç—Ä–∏—è": "üìê",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "üíª",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "üßÆ",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "üìö",
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": "üá∑üá∫",
    "–ü—Ä–∞–∫—Ç–∏–∫—É–º –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É": "üìù",
    "–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –†–æ–¥–∏–Ω—ã": "üõ°Ô∏è",
    "–ë–∏–æ–ª–æ–≥–∏—è": "üß¨",
    "–§–∏–∑–∏–∫–∞": "üî¨",
    "–•–∏–º–∏—è": "‚öóÔ∏è",
    "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞": "üèãÔ∏è",
    "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è": "üó∫Ô∏è",
    "–ò—Å—Ç–æ—Ä–∏—è": "üè∫",
    "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": "‚öñÔ∏è",
    "–¢—Ä—É–¥ (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è)": "üîß",
    "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç": "üìë",
    "–≠–∫–æ–Ω–æ–º–∏–∫–∞": "üí∞",
}

EMOJI_OTHER_SUBJECTS = ["üìí", "üìï", "üìó", "üìò", "üìô"]

EMOJI_NUMBERS = {
    1: "1Ô∏è‚É£",
    2: "2Ô∏è‚É£",
    3: "3Ô∏è‚É£",
    4: "4Ô∏è‚É£",
    5: "5Ô∏è‚É£",
    6: "6Ô∏è‚É£",
    7: "7Ô∏è‚É£",
    8: "8Ô∏è‚É£",
    9: "9Ô∏è‚É£",
    10: "üîü",
}

SUBSCRIPT_MAP = str.maketrans("12345", "‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ")


async def user_send_message(user_id, message, markup=None):
    from app import bot

    try:
        chat = await bot.get_chat(user_id)
        if markup:
            await bot.send_message(chat_id=chat.id, text=message, reply_markup=markup)
        else:
            await bot.send_message(chat_id=chat.id, text=message)
    except Exception as e:
        return


async def get_emoji_subject(name):
    return EMOJI_SUBJECTS.get(name, random.choice(EMOJI_OTHER_SUBJECTS))


async def get_mark_with_weight(mark, weight):
    return f"{mark}{str(weight).translate(SUBSCRIPT_MAP)}"


@handle_api_error()
async def get_student(user_id, active=True) -> list[AsyncMobileAPI, User]:
    async with AsyncSessionLocal() as session:
        query = db.select(User).filter_by(user_id=user_id)
        if active:
            query = query.filter_by(active=True)

        result = await session.execute(query)
        user = result.scalar_one_or_none()

        if not user:
            return None, None

        api = AsyncMobileAPI(system=Systems.MES)
        api.token = user.token
        return api, user


@handle_api_error()
async def get_web_api(user_id, active=True):
    async with AsyncSessionLocal() as session:
        query = db.select(User).filter_by(user_id=user_id)
        if active:
            query = query.filter_by(active=True)

        result = await session.execute(query)
        user = result.scalar_one_or_none()

        if not user:
            return None, None

        api = AsyncWebAPI(system=Systems.MES)
        api.token = user.token
        return api, user
    

async def render_settings_text(
    definitions, settings, selected_key, is_experimental=False
):
    lines = []
    for definition in definitions:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if not definition.visible:
            continue

        val = getattr(settings, definition.key, None)
        display = "‚úÖ" if val is True else "‚ùå" if val is False else str(val)
        prefix = "‚û°Ô∏è" if definition.key == selected_key else "‚ñ´Ô∏è"

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if definition.experimental:
            display = f"{display}"

        lines.append(f"{prefix} {definition.label}: {display}")
    return "\n\n".join(lines)


async def send_settings_editor(
    message_or_callback, selected_index: int, is_experimental=False
):
    async with AsyncSessionLocal() as session:
        user_id = message_or_callback.from_user.id
        result = await session.execute(db.select(Settings).filter_by(user_id=user_id))
        settings = result.scalars().first()

        # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —Ç–∏–ø—É
        if is_experimental:
            filter_condition = SettingDefinition.experimental == True
        else:
            filter_condition = SettingDefinition.experimental == False

        result = await session.execute(
            db.select(SettingDefinition)
            .filter_by(visible=True)
            .filter(filter_condition)
            .order_by(SettingDefinition.ordering)
        )
        definitions = result.scalars().all()

        if not definitions:
            text = "üß™ <b>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏</b>\n\n–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"
            if isinstance(message_or_callback, Message):
                await message_or_callback.answer(
                    text, reply_markup=kb.back_to_main_settings
                )
            else:
                await message_or_callback.message.edit_text(
                    text, reply_markup=kb.back_to_main_settings
                )
            return

        if selected_index > len(definitions) - 1:
            selected_index = 0
        elif selected_index < 0:
            selected_index = len(definitions) - 1
        selected_key = definitions[selected_index].key

        title = (
            "üß™ <b>–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>"
            if is_experimental
            else "‚öôÔ∏è <b>–û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>"
        )
        text = f"{title}\n\n"
        text += await render_settings_text(
            definitions, settings, selected_key, is_experimental
        )
        keyboard = await kb.build_settings_nav_keyboard(
            user_id, definitions, selected_index, is_experimental
        )

        if isinstance(message_or_callback, Message):
            await message_or_callback.answer(text, reply_markup=keyboard)
        else:
            await message_or_callback.message.edit_text(text, reply_markup=keyboard)


def get_error_message_by_status(status_code: int) -> str:
    if status_code == 408:
        return ERROR_408_MESSAGE
    elif status_code in [500, 501, 502]:
        return ERROR_500_MESSAGE
    else:
        return ERROR_MESSAGE


async def ensure_user_settings(session, user_id: int):
    result = await session.execute(db.select(Settings).filter_by(user_id=user_id))
    settings = result.scalar_one_or_none()
    if not settings:
        session.add(Settings(user_id=user_id))
        await session.commit()


async def save_profile_data(session, user_id, profile_data, username):
    result = await session.execute(db.select(UserData).filter_by(user_id=user_id))
    user_data: UserData = result.scalar_one_or_none()

    api, user = await get_student(user_id)
    profile = await api.get_family_profile(profile_id=user.profile_id)

    phone = profile.profile.phone
    if phone and not phone.startswith("7"):
        if phone.startswith("8"):
            phone = "7" + phone[1:]
        else:
            phone = "7" + phone
    elif not phone:
        phone = None

    email = profile.profile.email
    if not email:
        email = None

    if not user_data:
        user_data = UserData(
            user_id=user_id,
            first_name=profile_data.first_name,
            last_name=profile_data.last_name,
            middle_name=profile_data.middle_name,
            gender=profile_data.sex,
            phone=phone,
            email=email,
            birthday=profile_data.birth_date,
            username=username,
        )
        session.add(user_data)
    else:
        user_data.first_name = profile_data.first_name
        user_data.last_name = profile_data.last_name
        user_data.middle_name = profile_data.middle_name
        user_data.gender = profile_data.sex
        user_data.phone = phone
        user_data.email = email
        user_data.birthday = profile_data.birth_date
        user_data.username = username

    await session.commit()


async def parse_and_format_phone(raw_number: str) -> str:
    try:
        raw_number = raw_number.strip()

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º "8" –≤ "+7" (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ 11 –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "8")
        if raw_number.startswith("8") and len(raw_number) == 11:
            raw_number = "+7" + raw_number[1:]

        # –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "7" –∏ –¥–ª–∏–Ω–∞ 11, –¥–æ–±–∞–≤–ª—è–µ–º "+"
        elif raw_number.startswith("7") and len(raw_number) == 11:
            raw_number = "+" + raw_number

        # –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "00" (–º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç), –∑–∞–º–µ–Ω–∏–º –Ω–∞ "+"
        elif raw_number.startswith("00"):
            raw_number = "+" + raw_number[2:]

        # –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞ ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ)
        phone = phonenumbers.parse(raw_number, None)

        if not phonenumbers.is_valid_number(phone):
            return "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä"

        return phonenumbers.format_number(
            phone, phonenumbers.PhoneNumberFormat.INTERNATIONAL
        )

    except phonenumbers.NumberParseException:
        return "–ù/–î"


async def deep_links(message: Message, args, bot: Bot, state: FSMContext):
    if args.startswith("done-homework-"):
        from app.utils.user.api.mes.homeworks import handle_homework_navigation

        homework_entry_id = args.split("-")[2]
        done = args.split("-")[3]
        done = True if done == "True" else False

        api, user = await get_student(message.from_user.id)

        await message.delete()

        await api.done_homework(
            homework_entry_id=homework_entry_id, profile_id=user.profile_id, done=done
        )

        text, date, markup = await handle_homework_navigation(
            message.from_user.id, state, "to_date", subject_mode=False
        )

        await state.update_data(date=date)

        await message.answer(text, reply_markup=markup)

    elif args.startswith("subject-homework-"):
        from app.utils.user.api.mes.homeworks import handle_homework_navigation
        
        subject_id = int(args.split("-")[2])
        date = datetime.strptime(args.split("-")[3], "%d_%m_%Y")
        
        await message.delete()
        
        text, date, markup = await handle_homework_navigation(
            message.from_user.id, state, subject_mode=True, date=date, subject_id=subject_id
        )
        

        await state.update_data(date=date)
        await state.update_data(subject_id=subject_id)

        await message.answer(text, reply_markup=markup)
        
    elif args.startswith("subject-marks-"):
        from app.utils.user.api.mes.marks import get_marks_by_subject
        
        subject_id = int(args.split("-")[2])
        
        await message.delete()
        
        text = await get_marks_by_subject(
            message.from_user.id, subject_id=subject_id
        )
        
        await state.update_data(subject_id=subject_id)

        await message.answer(text, reply_markup=kb.subject_marks)
    
    elif args.startswith("autogdz-"):
        from app.utils.user.api.learnify.subscription import get_gdz_answers
        
        homework_id = int(args.split("-")[1])
        
        await message.delete()
        
        async with AsyncSessionLocal() as session:
            result = await session.execute(db.select(PremiumSubscription).filter_by(user_id=message.from_user.id))
            premium_user = result.scalar_one_or_none()
            
            if not premium_user or not premium_user.is_active:
                await message.answer(f'‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ <b>Learnify Premium</b> –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=kb.get_premium)
                return
            
            result = await session.execute(db.select(Homework).filter_by(id=homework_id))
            homework = result.scalar_one_or_none()
            if not homework:
                message.answer('‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
            
            result = await session.execute(db.select(Gdz).filter_by(user_id=message.from_user.id, subject_id=homework.subject_id))
            gdz_info = result.scalar_one_or_none()
            
            if not gdz_info:
                text = (
                    '‚ùå <b>–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ì–î–ó</b>\n\n'
                )
                return await message.answer(text, reply_markup=kb.set_auto_gdz_links)
            
            temp_message = await message.answer(f'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...')
            
            text, solutions = await get_gdz_answers(user_id=message.from_user.id, homework=homework, subject_id=homework.subject_id)
            
            await temp_message.delete()
            
            if not solutions:
                await message.answer('‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã', reply_markup=kb.delete_message)
            
            await message.answer(text, reply_markup=kb.delete_message, protect_content=True)
            
            def chunked(iterable, n):
                for i in range(0, len(iterable), n):
                    yield iterable[i:i + n]
            
            for num, solution in enumerate(solutions, 1):
                images = solution['images']
                text = solution['text']

                image_chunks = list(chunked(images, 10))
                total_parts = len(image_chunks)

                for i, image_chunk in enumerate(image_chunks, start=1):
                    if total_parts > 1:
                        caption = f"{num}. {text}\nüß© –ß–∞—Å—Ç—å {i}/{total_parts}"
                    else:
                        caption = f"{num}. {text}"

                    media_group = MediaGroupBuilder(caption=caption)
                    for image in image_chunk:
                        media_group.add_photo(media=image)

                    await message.answer_media_group(
                        media=media_group.build(),
                        protect_content=True
                    )
            await message.answer(text='‚úÖ <b>–í—ã–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>', reply_markup=kb.delete_message)