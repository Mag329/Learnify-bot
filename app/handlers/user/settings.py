from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

import app.keyboards.user.keyboards as kb
from app.states.user.states import SettingsEditStates
from app.utils.database import (AsyncSessionLocal, SettingDefinition, Settings,
                                db)
from app.utils.user.cache import clear_user_cache
from app.utils.user.utils import send_settings_editor

router = Router()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    await send_settings_editor(message, selected_index=0, is_experimental=False)


@router.message(F.text == "üß™ –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ")
async def experimental_settings(message: Message):
    await send_settings_editor(message, selected_index=0, is_experimental=True)


@router.callback_query(F.data.startswith(("nav_up_settings:", "nav_down_settings:")))
async def nav_settings_handler(callback: CallbackQuery):
    await callback.answer()

    action, index_str, settings_type = callback.data.split(":")
    index = int(index_str)
    is_experimental = settings_type == "experimental"

    if action == "nav_up_settings":
        new_index = index - 1
    else:  # nav_down_settings
        new_index = index + 1

    await send_settings_editor(
        callback, selected_index=new_index, is_experimental=is_experimental
    )


@router.callback_query(F.data.startswith("edit_settings:"))
async def edit_setting(callback: CallbackQuery, state: FSMContext):
    try:
        _, index_str, key, settings_type = callback.data.split(":")
        selected_index = int(index_str)
        is_experimental = settings_type == "experimental"
    except ValueError:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    async with AsyncSessionLocal() as db_session:
        # –ü–æ–ª—É—á–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        result = await db_session.execute(
            db.select(SettingDefinition).filter_by(key=key)
        )
        definition = result.scalar()

        if not definition:
            await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
        if definition.experimental:
            result = await db_session.execute(
                db.select(Settings).filter_by(user_id=callback.from_user.id)
            )
            settings: Settings = result.scalar()
            if not settings.experimental_features:
                await callback.answer(
                    "‚ö†Ô∏è –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã", show_alert=True
                )
                return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏
        result = await db_session.execute(
            db.select(Settings).filter_by(user_id=callback.from_user.id)
        )
        settings = result.scalar()

        if not settings:
            await callback.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –ï—Å–ª–∏ —Ç–∏–ø bool ‚Äî –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        if definition.type == "bool":
            current_value = getattr(settings, definition.key, False)
            setattr(settings, definition.key, not current_value)
            await db_session.commit()
            await send_settings_editor(
                callback, selected_index=selected_index, is_experimental=is_experimental
            )
        else:
            await callback.message.answer(
                f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è: <b>{definition.label}</b>"
            )
            await state.update_data(
                setting_key=key,
                setting_type=definition.type,
                selected_index=selected_index,
                is_experimental=is_experimental,
            )
            await state.set_state(SettingsEditStates.waiting_for_value)


@router.message(SettingsEditStates.waiting_for_value)
async def process_new_setting_value(message: Message, state: FSMContext):
    data = await state.get_data()
    setting_key = data.get("setting_key")
    setting_type = data.get("setting_type")
    selected_index = data.get("selected_index")
    is_experimental = data.get("is_experimental", False)

    value = message.text.strip()

    # –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∏–ø—É
    try:
        if setting_type == "int":
            value = int(value)
        elif setting_type == "float":
            value = float(value)
        # –¥–ª—è string –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return

    async with AsyncSessionLocal() as db_session:
        result = await db_session.execute(
            db.select(Settings).filter_by(user_id=message.from_user.id)
        )
        settings = result.scalar()
        if not settings:
            await message.answer("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.clear()
            return

        setattr(settings, setting_key, value)
        await db_session.commit()

    await message.answer("‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    await send_settings_editor(
        message, selected_index=selected_index, is_experimental=is_experimental
    )
    await state.clear()


@router.callback_query(F.data == "back_to_main_settings")
async def back_to_main_settings(callback: CallbackQuery):
    await callback.answer()
    await send_settings_editor(callback, selected_index=0, is_experimental=False)


@router.callback_query(F.data == "show_experimental_settings")
async def show_experimental_settings(callback: CallbackQuery):
    await callback.answer()
    await send_settings_editor(callback, selected_index=0, is_experimental=True)


@router.callback_query(F.data == "clear_cache")
async def clear_cache_handler(callback: CallbackQuery):
    await callback.answer()
    num = await clear_user_cache(callback.from_user.id)
    text = (
        "‚úÖ <b>–ö—ç—à —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω!</b>\n\n"
        f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ <i>{num}</i> —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
    )
    await callback.message.answer(text, reply_markup=kb.delete_message)
