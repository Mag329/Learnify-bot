from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InputMediaPhoto
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from config import BOT_VERSION, DEVELOPER, DEVELOPER_SITE
import app.keyboards.user.keyboards as kb
from app.utils.database import AsyncSessionLocal, db, User, Settings


router = Router()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    text = f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\nü§ñ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>\n    - üì¶ <b>–í–µ—Ä—Å–∏—è –±–æ—Ç–∞:</b> {BOT_VERSION}\n    - üë®‚Äçüíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> {DEVELOPER}\n    - üåê <b>–°–∞–π—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:</b> {DEVELOPER_SITE}"

    await message.answer(
        text,
        reply_markup=await kb.user_settings(message.from_user.id),
        disable_web_page_preview=True,
    )


@router.callback_query(F.data == "enable_new_mark_notification_settings")
async def enable_new_mark_notification_settings(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            db.select(Settings).filter_by(user_id=callback.from_user.id)
        )
        settings: Settings = result.scalar_one_or_none()

        if settings:
            settings.enable_new_mark_notification = (
                not settings.enable_new_mark_notification
            )
            await session.commit()

        await callback.answer(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö {"‚úÖ" if settings.enable_new_mark_notification else "‚ùå"}\n\n–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ü–µ–Ω–∫–∞—Ö', show_alert=True)
        await callback.message.edit_text(
            text=callback.message.text,
            reply_markup=await kb.user_settings(callback.from_user.id),
        )


@router.callback_query(F.data == "enable_homework_notification_settings")
async def enable_new_mark_notification_settings(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            db.select(Settings).filter_by(user_id=callback.from_user.id)
        )
        settings: Settings = result.scalar_one_or_none()

        if settings:
            settings.enable_homework_notification = (
                not settings.enable_homework_notification
            )
            await session.commit()

        await callback.answer(f'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –î–ó {"‚úÖ" if settings.enable_homework_notification else "‚ùå"}\n\n–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è—Ö', show_alert=True)
        await callback.message.edit_text(
            text=callback.message.text,
            reply_markup=await kb.user_settings(callback.from_user.id),
        )


@router.callback_query(F.data == "experimental_features_settings")
async def experimental_features_settings(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            db.select(Settings).filter_by(user_id=callback.from_user.id)
        )
        settings: Settings = result.scalar_one_or_none()

        if settings:
            settings.experimental_features = not settings.experimental_features
            await session.commit()

        await callback.answer()
        await callback.message.edit_text(
            text=callback.message.text,
            reply_markup=await kb.user_settings(callback.from_user.id),
        )



@router.callback_query(F.data == "skip_empty_days_schedule_settings")
async def skip_empty_days_schedule_settings(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            db.select(Settings).filter_by(user_id=callback.from_user.id)
        )
        settings: Settings = result.scalar_one_or_none()

        if settings:
            settings.skip_empty_days_schedule = not settings.skip_empty_days_schedule
            await session.commit()

        await callback.answer(f'–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—É—Å—Ç—ã–µ –¥–Ω–∏ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ) {"‚úÖ" if settings.skip_empty_days_schedule else "‚ùå"}\n\n–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–Ω–∏ –±–µ–∑ —É—Ä–æ–∫–æ–≤ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏', show_alert=True)
        await callback.message.edit_text(
            text=callback.message.text,
            reply_markup=await kb.user_settings(callback.from_user.id),
        )
        

@router.callback_query(F.data == "skip_empty_days_homeworks_settings")
async def skip_empty_days_homeworks_settings(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            db.select(Settings).filter_by(user_id=callback.from_user.id)
        )
        settings: Settings = result.scalar_one_or_none()

        if settings:
            settings.skip_empty_days_homeworks = not settings.skip_empty_days_homeworks
            await session.commit()

        await callback.answer(f'–ü—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—É—Å—Ç—ã–µ –¥–Ω–∏ (–î–ó) {"‚úÖ" if settings.skip_empty_days_homeworks else "‚ùå"}\n\n–ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–Ω–∏ –±–µ–∑ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π', show_alert=True)
        await callback.message.edit_text(
            text=callback.message.text,
            reply_markup=await kb.user_settings(callback.from_user.id),
        )
        
        
@router.callback_query(F.data == "next_day_if_lessons_end_schedule_settings")
async def next_day_if_lessons_end_schedule_settings(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            db.select(Settings).filter_by(user_id=callback.from_user.id)
        )
        settings: Settings = result.scalar_one_or_none()

        if settings:
            settings.next_day_if_lessons_end_schedule = not settings.next_day_if_lessons_end_schedule
            await session.commit()

        await callback.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å {"‚úÖ" if settings.next_day_if_lessons_end_schedule else "‚ùå"}\n\n–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –µ—Å–ª–∏ —É—Ä–æ–∫–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å', show_alert=True)
        await callback.message.edit_text(
            text=callback.message.text,
            reply_markup=await kb.user_settings(callback.from_user.id),
        )
        
        
@router.callback_query(F.data == "next_day_if_lessons_end_homeworks_settings")
async def next_day_if_lessons_end_homeworks_settings(callback: CallbackQuery):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            db.select(Settings).filter_by(user_id=callback.from_user.id)
        )
        settings: Settings = result.scalar_one_or_none()

        if settings:
            settings.next_day_if_lessons_end_homeworks = not settings.next_day_if_lessons_end_homeworks
            await session.commit()

        await callback.answer(f'–î–ó –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ—Å–ª–µ —É—Ä–æ–∫–æ–≤ {"‚úÖ" if settings.next_day_if_lessons_end_homeworks else "‚ùå"}\n\n–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å, –µ—Å–ª–∏ —É—Ä–æ–∫–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å', show_alert=True)
        await callback.message.edit_text(
            text=callback.message.text,
            reply_markup=await kb.user_settings(callback.from_user.id),
        )