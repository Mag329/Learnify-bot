from datetime import datetime, timedelta
import logging

from aiogram import F, Router, Bot
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (CallbackQuery, LabeledPrice, Message,
                           PreCheckoutQuery)

import app.keyboards.user.keyboards as kb
from app.states.user.states import ChooseAmountForPaymentState, ChooseUserForGiftState
from app.utils.database import (AsyncSessionLocal, PremiumSubscription,
                                PremiumSubscriptionPlan, Transaction, UserData, db)
from app.utils.user.api.learnify.subscription import (create_subscription,
                                                      get_user_info)

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "subscription_page")
async def subscription_page_handler(callback: CallbackQuery):
    subscription = await get_user_info(callback.from_user.id)
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(db.select(PremiumSubscription).filter_by(user_id=callback.from_user.id))
        premium_user = result.scalar_one_or_none()
        if not premium_user:
            premium_user = PremiumSubscription(
                user_id=callback.from_user.id,
                is_active=False
            )
            session.add(premium_user)
        else:
            premium_user.is_active = subscription.is_active
            premium_user.expires_at = subscription.expires_at.replace(tzinfo=None)
            
        await session.commit()
        await session.refresh(premium_user)
    
    await callback.answer()
    if subscription and subscription.is_active:
        text = (
            'üíé <b>Learnify Premium</b>\n\n'
            f'<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> <i>{subscription.expires_at.strftime("%H:%M:%S %d %B %Y")}</i>\n\n'
            f'<b>–ë–∞–ª–∞–Ω—Å:</b> {premium_user.balance} ‚≠êÔ∏è'
        )
    else:
        text = (
            'üíé <b>Learnify Premium</b>\n\n'
            '–†–∞—Å–∫—Ä–æ–π –≤–µ—Å—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –±–æ—Ç–∞ —Å Premium-–ø–æ–¥–ø–∏—Å–∫–æ–π!\n\n'
            f'<b>–ë–∞–ª–∞–Ω—Å:</b> {premium_user.balance} ‚≠êÔ∏è\n\n'
            '‚ú® <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b>\n'
            '‚Ä¢ –ê–≤—Ç–æ-–ì–î–ó ‚Äî –±–æ—Ç —Å–∞–º –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –¥–ª—è –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π\n'
            '‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞ ‚ù§Ô∏è\n\n'
            'üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 100 ‚≠êÔ∏è –≤ –º–µ—Å—è—Ü'
        )
        
    await callback.message.edit_text(text=text, reply_markup=await kb.subscription_keyboard(callback.from_user.id, subscription))
    

@router.callback_query(F.data == "get_subscription")
async def get_subscription_handler(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text('üíé <b>Learnify Premium</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω', reply_markup=await kb.choose_subscription_plan('myself'))
    

@router.callback_query(F.data.startswith("subscription_plan_"))
async def subscription_plan_handler(callback: CallbackQuery):
    data = callback.data.split("_")
    type = data[3]
    
    async with AsyncSessionLocal() as session:
        result = await session.execute(db.select(PremiumSubscriptionPlan).filter_by(name=data[2]))
        plan = result.scalar_one_or_none()
    await callback.message.answer_invoice(
        title="Learnify Premium",
        description=f"Learnify Premium –Ω–∞ {plan.text_name}",
        prices=[LabeledPrice(label='–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏', amount=plan.price)],
        provider_token='',
        payload=f'{plan.id} for {type}',
        currency='XTR',
        reply_markup=await kb.buy_subscription_keyboard(plan.id, type)
    )


@router.pre_checkout_query()
async def pre_checkout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def successful_payment_handler(message: Message, state: FSMContext, bot: Bot):
    payload_parts = message.successful_payment.invoice_payload.split()
    telegram_payment_id = message.successful_payment.telegram_payment_charge_id
    user_id = message.from_user.id
    data = await state.get_data()
    
    operation_type = None
    plan = None
    amount = 0
    
    if payload_parts[0].startswith('replenish'):
        operation_type = 'replenish'
        amount = int(payload_parts[0].split('_')[1])
    else:
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                db.select(PremiumSubscriptionPlan).filter_by(id=int(payload_parts[0]))
            )
            plan = result.scalar_one_or_none()

        if not plan:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await bot.refund_star_payment(
                user_id=message.from_user.id,
                telegram_payment_charge_id=message.successful_payment.telegram_payment_charge_id
            )
            logger.error(f"Payment failed: plan not found (payload={payload_parts})")
            return

        if len(payload_parts) > 2 and payload_parts[2] == 'myself':
            operation_type = 'myself'
            amount = plan.price
        elif len(payload_parts) > 2 and payload_parts[2].startswith('gift'):
            recipient_user_id = int(payload_parts[2].split('-')[1])
            operation_type = 'gift'
            amount = plan.price
        else:
            await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return


    async with AsyncSessionLocal() as session:
        try:
            result = await session.execute(
                db.select(PremiumSubscription).filter_by(user_id=user_id)
            )
            premium_user = result.scalar_one_or_none()
            
            # --- –¢–∏–ø: –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å–µ–±—è ---
            if operation_type == 'myself':
                transaction_credit = Transaction(
                    user_id=user_id,
                    operation_type='credit',
                    amount=amount,
                    telegram_transaction_id=telegram_payment_id
                )
                transaction_debit = Transaction(
                    user_id=user_id,
                    operation_type='debit',
                    amount=amount
                )
                session.add_all([transaction_credit, transaction_debit])
                await session.commit()
                
                result, msg = await create_subscription(session=session, user_id=user_id, plan=plan, premium_user=premium_user)

                if msg:
                    await message.answer(f'‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b>\n{msg}')
                
                text = (
                    "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
                    f"üóìÔ∏è –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <i>{result.expires_at.strftime('%H:%M:%S %d %B %Y')}</i>\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞ ‚ù§Ô∏è\n"
                    "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üöÄ"
                )

            # --- –¢–∏–ø: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ---
            elif operation_type == 'replenish':
                transaction = Transaction(
                    user_id=user_id,
                    operation_type='credit',
                    amount=amount,
                    telegram_transaction_id=telegram_payment_id
                )
                session.add(transaction)

                premium_user.balance += amount
                await session.commit()

                text = (
                    f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!\n\n"
                    f"üí≥ –ë–∞–ª–∞–Ω—Å: {premium_user.balance} ‚≠êÔ∏è\n"
                    f"üí∞ –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount} ‚≠êÔ∏è\n\n"
                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–∞ ‚ù§Ô∏è\n"
                    "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üöÄ"
                )

            # --- –¢–∏–ø: –ø–æ–¥–∞—Ä–æ–∫ ---
            elif operation_type == 'gift':
                transaction_credit = Transaction(
                    user_id=user_id,
                    operation_type='credit',
                    amount=amount,
                    telegram_transaction_id=telegram_payment_id
                )
                transaction_debit = Transaction(
                    user_id=user_id,
                    operation_type='debit',
                    amount=amount
                )
                session.add_all([transaction_credit, transaction_debit])
                await session.commit()
                
                result, msg = await create_subscription(session=session, user_id=recipient_user_id, plan=plan, premium_user=premium_user)

                if msg:
                    await message.answer(f'‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</b>\n{msg}')
                    return
                
                text = (
                    "üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n"
                    f"@{data['username']} —Å–∫–æ—Ä–æ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞—à–µ–º –ø–æ–¥–∞—Ä–∫–µ üíå"
                )
                
                recipient_text = (
                    f"üéÅ <b>–í–∞–º –ø–æ–¥–∞—Ä–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {plan.text_name}!</b>\n\n"
                    f"–ü–æ–¥–∞—Ä–æ–∫ –æ—Ç: @{message.from_user.username}\n"
                    f"<blockquote>{data['description']}</blockquote>\n\n"
                    f"üóìÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: <b>{result.expires_at.strftime('%d %B %Y %H:%M')}</b>\n\n"
                    "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è üöÄ"
                )
                
                try:
                    chat = await bot.get_chat(recipient_user_id)
                    await bot.send_message(
                        chat_id=chat.id, text=recipient_text
                    )
                except Exception as e:
                    logger.error()
                    

            else:
                text = "‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏"
                await bot.refund_star_payment(
                    user_id=message.from_user.id,
                    telegram_payment_charge_id=message.successful_payment.telegram_payment_charge_id
                )

            await message.answer(text)

        except Exception as e:
            await session.rollback()
            logger.exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            
            

@router.callback_query(F.data == "replenish_subscription")
async def replenish_subscription_handler(callback: CallbackQuery, state: FSMContext):
    async with AsyncSessionLocal() as session:
        result = await session.execute(db.select(PremiumSubscription).filter_by(user_id=callback.from_user.id))
        premium_user = result.scalar_one_or_none()
        
    await state.update_data(main_message_id=callback.message.message_id)
    await state.set_state(ChooseAmountForPaymentState.amount)
    
    await callback.answer()
    await callback.message.edit_text(f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {premium_user.balance if premium_user.balance else 0} ‚≠êÔ∏è\n\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å", reply_markup=kb.back_to_menu)
    
    
@router.message(F.text, StateFilter(ChooseAmountForPaymentState.amount))
async def amount_for_payment_handler(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    amount = message.text
    
    await message.delete()

    if not amount.isdigit():
        await message.edit_text("‚ùå <b>–û—à–∏–±–∫–∞</b>\n–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=kb.back_to_menu)
        return
    
    if int(amount) <= 0:
        await message.edit_text("‚ùå <b>–û—à–∏–±–∫–∞</b>\n–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º", reply_markup=kb.back_to_menu)
        return
    
    amount = int(amount)
    
    await state.clear()
    
    await bot.delete_message(chat_id=message.from_user.id, message_id=data["main_message_id"])
    
    await message.answer_invoice(
        title="Learnify Premium",
        description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ({amount} ‚≠êÔ∏è)",
        prices=[LabeledPrice(label='–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞', amount=amount)],
        provider_token='',
        payload=f'replenish_{amount} for myself',
        currency='XTR',
        reply_markup=await kb.buy_subscription_keyboard(amount, 'replenish')
    )
    
    
@router.callback_query(F.data == "give_subscription")
async def give_subscription_handler(callback: CallbackQuery, state: FSMContext):
    await state.update_data(main_message_id=callback.message.message_id)
    await state.set_state(ChooseUserForGiftState.username)
    
    await callback.answer()
    await callback.message.edit_text(f'üéÅ <b>Learnify Premium –≤ –ø–æ–¥–∞—Ä–æ–∫</b>\n\n‚ú® –í–≤–µ–¥–∏—Ç–µ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫', reply_markup=kb.back_to_menu)
    

@router.message(F.text, StateFilter(ChooseUserForGiftState.username))
async def username_for_gift_handler(message: Message, state: FSMContext, bot: Bot):
    if message.text.startswith('@'):
        data = await state.get_data()
        
        username = message.text[1:]
        
        async with AsyncSessionLocal() as session:
            result = await session.execute(db.select(UserData).where(db.func.lower(UserData.username) == username.lower()))
            user = result.scalar_one_or_none()

            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=kb.back_to_menu)
                return
            if user.user_id == message.from_user.id:
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —Å–µ–±–µ üòâ",
                    reply_markup=kb.back_to_menu
                )
                return
        
        await state.update_data(username=user.username)
        await state.update_data(user_id=user.user_id)
        await state.set_state(ChooseUserForGiftState.description)
        
        await message.delete()
        
        text = (
            f"üéÅ <b>Learnify Premium –≤ –ø–æ–¥–∞—Ä–æ–∫</b>\n\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{user.username}\n\n"
            "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–æ –∫ –ø–æ–¥–∞—Ä–∫—É.\n"
            "–û–Ω–æ —Å–¥–µ–ª–∞–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ –µ—â—ë –ø—Ä–∏—è—Ç–Ω–µ–µ ‚ú®"
        )
        
        await bot.edit_message_text(chat_id=message.from_user.id, message_id=data["main_message_id"], text=text,  reply_markup=kb.back_to_menu)

       


@router.message(F.text, StateFilter(ChooseUserForGiftState.description))
async def description_for_gift_handler(message: Message, state: FSMContext, bot: Bot):
    data = await state.get_data()
    description = message.text.strip()

    await state.update_data(description=description)
    await state.set_state(None)
    
    await message.delete()
    
    text = (
        f"üéÅ <b>Learnify Premium –≤ –ø–æ–¥–∞—Ä–æ–∫</b>\n\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{data['username']}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: <i>{description}</i>\n\n"
        "üì¶ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω"
    )
    
    await bot.edit_message_text(chat_id=message.from_user.id, message_id=data["main_message_id"], text=text,  reply_markup=await kb.choose_subscription_plan(f'gift-{data['user_id']}'))