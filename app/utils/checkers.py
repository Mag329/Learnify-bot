from datetime import datetime, timedelta
from aiogram import Bot

from app.utils.database import AsyncSessionLocal, db, User, UserData
from app.utils.user.utils import get_notifications, get_replaced
import app.keyboards.user.keyboards as kb

from app.utils.user.gigachat_api import birthday_greeting


async def new_notifications_checker(bot: Bot):
    async with AsyncSessionLocal() as session:
        result = await session.execute(db.select(User))
        users = result.scalars().all()

        for user in users:
            result = await get_notifications(user.user_id, is_checker=True)
            if result:
                try:
                    chat = await bot.get_chat(user.user_id)
                    await bot.send_message(
                        chat_id=chat.id, text=result, reply_markup=kb.delete_message
                    )
                except Exception as e:
                    continue


async def replaced_checker(bot: Bot):
    async with AsyncSessionLocal() as session:
        result = await session.execute(db.select(User))
        users = result.scalars().all()

        for user in users:
            result = await get_replaced(user.user_id, datetime.now())
            if result:
                try:
                    chat = await bot.get_chat(user.user_id)
                    await bot.send_message(
                        chat_id=chat.id, text=result, reply_markup=kb.delete_message
                    )
                except Exception as e:
                    continue

            result = await get_replaced(
                user.user_id, datetime.now() + timedelta(days=1)
            )
            if result:
                try:
                    chat = await bot.get_chat(user.user_id)
                    await bot.send_message(
                        chat_id=chat.id, text=result, reply_markup=kb.delete_message
                    )
                except Exception as e:
                    continue


async def birthday_checker(bot: Bot):
    async with AsyncSessionLocal() as session:
        result = await session.execute(db.select(UserData))
        users = result.scalars().all()

        for user in users:
            birthday = user.birthday
            if birthday is None:
                continue

            if birthday.date() == datetime.now().date():
                try:
                    chat = await bot.get_chat(user.user_id)
                    
                    text = await birthday_greeting(user.first_name)
                    
                    if not text:
                        text = f"{user.first_name}, <b>–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è!</b> üéâ\n\n–ü—É—Å—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –ø—Ä–∏–Ω–æ—Å–∏—Ç <i>–Ω–æ–≤—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è</i> –∏ —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏. üìö\n–ñ–µ–ª–∞–µ–º —É—Å–ø–µ—Ö–æ–≤ –≤ —É—á—ë–±–µ, <b>–≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è</b> –¥–ª—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –º–æ—Ä–µ –ø–æ–∑–∏—Ç–∏–≤–∞! üöÄ\n<b>Learnify</b> –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞ –ø—É—Ç–∏ –∫ –∑–Ω–∞–Ω–∏—è–º üí°"
                    
                    await bot.send_message(
                        chat_id=chat.id, text=text, reply_markup=kb.delete_message
                    )
                except Exception as e:
                    continue