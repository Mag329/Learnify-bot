import random
import phonenumbers
from statistics import mode, median
from datetime import datetime, date, timedelta
from collections import Counter, defaultdict

from octodiary.apis import AsyncMobileAPI
from octodiary.urls import Systems
from octodiary.exceptions import APIError

from app.utils.user.decorators import handle_api_error
from config import ERROR_MESSAGE, ERROR_403_MESSAGE
from app.utils.database import AsyncSessionLocal, db, User, Event, Settings
import app.keyboards.user.keyboards as kb



EMOJI_SUBJECTS = {
    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π (–∞–Ω–≥–ª–∏–π—Å–∫–∏–π) —è–∑—ã–∫": "üá¨üáß",
    "–ê–ª–≥–µ–±—Ä–∞": "‚ûó",
    "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": "üìä",
    "–ì–µ–æ–º–µ—Ç—Ä–∏—è": "üìê",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "üíª",
    "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "üßÆ",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "üìö",
    "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫": "üá∑üá∫",
    "–ü—Ä–∞–∫—Ç–∏–∫—É–º –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É": "üìù",
    "–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –†–æ–¥–∏–Ω—ã": "üõ°Ô∏è",
    "–ë–∏–æ–ª–æ–≥–∏—è": "üß¨",
    "–§–∏–∑–∏–∫–∞": "üî¨",
    "–•–∏–º–∏—è": "‚öóÔ∏è",
    "–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞": "üèãÔ∏è",
    "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è": "üó∫Ô∏è",
    "–ò—Å—Ç–æ—Ä–∏—è": "üè∫",
    "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": "‚öñÔ∏è",
    "–¢—Ä—É–¥ (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è)": "üîß",
}

EMOJI_OTHER_SUBJECTS = ["üìí", "üìï", "üìó", "üìò", "üìô"]

EMOJI_NUMBERS = {
    1: "1Ô∏è‚É£",
    2: "2Ô∏è‚É£",
    3: "3Ô∏è‚É£",
    4: "4Ô∏è‚É£",
    5: "5Ô∏è‚É£",
    6: "6Ô∏è‚É£",
    7: "7Ô∏è‚É£",
    8: "8Ô∏è‚É£",
    9: "9Ô∏è‚É£",
    10: "üîü",
}

SUBSCRIPT_MAP = str.maketrans("12345", "‚ÇÅ‚ÇÇ‚ÇÉ‚ÇÑ‚ÇÖ")


async def user_send_message(user_id, message, markup=None):
    from app import bot
    
    try:
        chat = await bot.get_chat(user_id)
        if markup:
            await bot.send_message(chat_id=chat.id, text=message, reply_markup=markup)
        else:
            await bot.send_message(chat_id=chat.id, text=message)
    except Exception as e:
        return


async def get_emoji_subject(name):
    return EMOJI_SUBJECTS.get(name, random.choice(EMOJI_OTHER_SUBJECTS))


async def get_mark_with_weight(mark, weight):
    return f"{mark}{str(weight).translate(SUBSCRIPT_MAP)}"
    

@handle_api_error()
async def get_student(user_id):
    async with AsyncSessionLocal() as session:
        result = await session.execute(
            db.select(User).filter_by(user_id=user_id)
        )
        user = result.scalar_one_or_none()

        if user:
            api = AsyncMobileAPI(system=Systems.MES)
            api.token = user.token
            return api, user
        else:
            return None, None
        
        
@handle_api_error()
async def get_marks(user_id, date_object):
    api, user = await get_student(user_id)
    marks = await api.get_marks(
        student_id=user.student_id,
        profile_id=user.profile_id,
        from_date=date_object,
        to_date=date_object,
    )
    
    text = f'üéì <b>–û—Ü–µ–Ω–∫–∏ –∑–∞</b> {date_object.strftime("%d %B (%a)")}:\n\n'
    
    
    for mark in marks.payload:
        mark_comment = f"\n<blockquote>{mark.comment}</blockquote>" if mark.comment_exists else ""
        text += f'{await get_emoji_subject(mark.subject_name)} <b>{mark.subject_name}:</b>\n    <i><code>{await get_mark_with_weight(mark.value, mark.weight)} - {mark.control_form_name}</code></i>{mark_comment}\n\n'
    
    if len(marks.payload) == 0:
        text = f'‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ </b>{date_object.strftime("%d %B (%a)")}'

    return text



@handle_api_error()
async def get_homework(user_id, date_object):
    api, user = await get_student(user_id)

    homework = await api.get_homeworks_short(
        student_id=user.student_id,
        profile_id=user.profile_id,
        from_date=date_object,
        to_date=date_object,
    )
    
    text = f'üìö <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–∞</b> {date_object.strftime("%d %B (%a)")}:\n\n'
    
    for task in homework.payload:
        description = task.description.rstrip("\n")
        text += f'{await get_emoji_subject(task.subject_name)} <b>{task.subject_name}:</b>\n    <code>{description}</code>\n\n'
    
    if len(homework.payload) == 0:
        text = f'‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–∞ </b>{date_object.strftime("%d %B (%a)")}'

    return text


@handle_api_error()
# async def get_homework_by_subject(user_id, subject_id, date_object):
    # api, user = await get_student(user_id)

    # lesson_info = await api.get_lesson_schedule_item(
    #     profile_id=user.profile_id,
    #     student_id=user.student_id,
    #     lesson_id=int(subject_id),
    # )

    # text = f"{await get_emoji_subject(lesson_info.subject_name)} <b>{lesson_info.subject_name}</b> {lesson_info.date.strftime('%d %b')}\n\n"

    # text += f"    <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n"

    # materials = []

    # for homework in lesson_info.lesson_homeworks:
    #     text += f"        - {homework.homework}\n"
    #     materials.append(*[[[url.url for url in item.urls if url.url_type == 'launch'] for item in material.items] for material in homework.materials])

    # text += f"\n    <b>–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:<b>"
    # for material in materials:
    #     text += f"    - {material}"
        
        
#     return text



async def get_notifications(user_id, all=False, is_checker=False):
    try:
        api, user = await get_student(user_id)

        notifications = await api.get_notifications(
            student_id=user.student_id,
            profile_id=user.profile_id
        )
        
        if len(notifications) <= 0:
            if is_checker:
                return None
            else:
                return "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>"
        
        
        async with AsyncSessionLocal() as session:
            result = await session.execute(
                db.select(Settings).filter(Settings.user_id == user_id)
            )
            settings = result.scalar_one_or_none()
    
            result = await session.execute(db.select(Event).filter(Event.student_id == notifications[0].student_profile_id))

            events = result.scalars().all()

            if not events:
                return None
            
            notifications_db = {
                (notif.teacher_id, notif.event_type, notif.date) for notif in events
            }
            
            new_notifications = []
            for notification in notifications:
                notification_id = (notification.author_profile_id, notification.event_type, notification.created_at)
                
                if notification_id not in notifications_db:
                    new_notifications.append(notification)
                    
                    new_event = Event(
                        student_id=notification.student_profile_id,
                        event_type=notification.event_type,
                        subject_name=notification.subject_name,
                        date=notification.created_at,
                        teacher_id=notification.author_profile_id
                    )
                    session.add(new_event)
            
            await session.commit()
        
        if not all:
            notifications = new_notifications
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        filtered_notifications = []
        for notification in notifications:
            if notification.event_type == 'create_mark' and (not is_checker or settings.enable_new_mark_notification):
                filtered_notifications.append(notification)
            elif notification.event_type == 'update_mark' and (not is_checker or settings.enable_new_mark_notification):
                filtered_notifications.append(notification)
            elif notification.event_type == 'delete_mark' and (not is_checker or settings.enable_new_mark_notification):
                filtered_notifications.append(notification)
            elif notification.event_type == 'create_homework' and (not is_checker or settings.enable_homework_notification):
                filtered_notifications.append(notification)
            elif notification.event_type == 'update_homework' and (not is_checker or settings.enable_homework_notification):
                filtered_notifications.append(notification)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if len(filtered_notifications) <= 0:
            if is_checker:
                return None
            return "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        text = f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({len(filtered_notifications)}):</b>\n\n"
        
        for notification in filtered_notifications:
            subject_name = f'{await get_emoji_subject(notification.subject_name)} {notification.subject_name} ({notification.created_at.strftime("%d.%m %H:%M:%S")})\n        '
                
            if notification.event_type == 'create_mark':
                text += subject_name
                text += f'<b>–ù–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:</b>\n            <i><code>{await get_mark_with_weight(notification.new_mark_value, notification.new_mark_weight)} - {notification.control_form_name}</code></i>\n\n'
                
            elif notification.event_type == 'update_mark':
                text += subject_name
                text += f'<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏:</b>\n            <i><code>{notification.old_mark_value} -> {get_mark_with_weight(notification.new_mark_value, notification.new_mark_weight)} - {notification.control_form_name}</code></i>\n\n'
                
            elif notification.event_type == 'delete_mark':
                text += subject_name
                text += f'<b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏:</b>\n            <i><code>{notification.old_mark_value} - {notification.control_form_name}</code></i>\n\n'
                
            elif notification.event_type == 'create_homework':
                text += subject_name
                description = notification.new_hw_description.rstrip("\n")
                text += f'<b>–ù–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–µ:</b>\n            <i><code>{description}</code></i>\n\n'
                
            elif notification.event_type == 'update_homework':
                text += subject_name
                description = notification.new_hw_description.rstrip("\n")
                text += f'<b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏—è:</b>\n            <i><code>{description}</code></i>\n\n'
            
        return text

    except APIError as e:
        if not is_checker:
            if e.status_code in [401, 403]:
                await user_send_message(user_id, ERROR_403_MESSAGE, kb.reauth)
            else:
                await user_send_message(user_id, ERROR_MESSAGE, kb.delete_message)
    except Exception as e:
        print(e)
        if not is_checker:
            await user_send_message(user_id, ERROR_MESSAGE, kb.delete_message)


@handle_api_error()
async def get_schedule(user_id, date_object, short=True):
    api, user = await get_student(user_id)
    
    schedule = await api.get_events(
        person_id=user.person_id,
        mes_role=user.role,
        begin_date=date_object,
        end_date=date_object
    )
    
    text = f'üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞</b> {date_object.strftime("%d %B (%a)")}:\n\n'
    
    for num, event in enumerate(schedule.response, 1):
        start_time = event.start_at.strftime("%H:%M")
        end_time = event.finish_at.strftime("%H:%M")
        
        if not short:
            lesson_info = await api.get_lesson_schedule_item(
                profile_id=user.profile_id,
                lesson_id=event.id,
                student_id=user.student_id,
                type=event.source
            )
            
            text += f'{EMOJI_NUMBERS.get(num, f"{num}Ô∏è")} {await get_emoji_subject(event.subject_name)} <b>{event.subject_name}</b> <i>({start_time}-{end_time})</i>\n    üìç {event.room_number}\n    üë§<i>{lesson_info.teacher.first_name[0]}. {lesson_info.teacher.middle_name[0]}. {lesson_info.teacher.last_name}</i> {" - üîÑ –∑–∞–º–µ–Ω–∞" if event.replaced else ""}\n\n'
        else:
            replased_text = "\n    üë§ - üîÑ –∑–∞–º–µ–Ω–∞"
            text += f'{EMOJI_NUMBERS.get(num, f"{num}Ô∏è")} {await get_emoji_subject(event.subject_name)} <b>{event.subject_name}</b> <i>({start_time}-{end_time})</i>\n    üìç {event.room_number}{replased_text if event.replaced else ""}\n\n'
        
    return text



@handle_api_error()
async def get_visits(user_id, date_object):
    api, user = await get_student(user_id)
    
    date_start_week = date_object - timedelta(days=date_object.weekday())
    date_week_end = date_start_week + timedelta(days=6)
    
    visits = await api.get_visits(
        profile_id=user.profile_id,
        student_id=user.student_id,
        contract_id=user.contract_id,
        from_date=date_start_week,
        to_date=date_week_end,
    )
    
    text = f'üìä <b>–ü–æ—Å–µ—â–µ–Ω–∏—è –∑–∞ –Ω–µ–¥–µ–ª—é ({date_start_week.strftime("%d.%m")}-{date_week_end.strftime("%d.%m")}):</b>\n\n'
    
    for visit in reversed(visits.payload):
        text += f'üìÖ <b>{visit.date.strftime("%d %B (%a)")}:</b>\n'
        for visit_in_day in visit.visits:
            text += f"    üîí {visit_in_day.in_}\n    ‚è±Ô∏è {visit_in_day.duration}\n    üîì {visit_in_day.out}\n\n"    
        
    return text


@handle_api_error()
async def get_profile(user_id):
    api, user = await get_student(user_id)
    
    data = await api.get_person_data(
        person_id=user.person_id,
        profile_id=user.profile_id
    )
    
    profile = await api.get_family_profile(profile_id=user.profile_id)
    
    balance = await api.get_status(
        profile_id=user.profile_id,
        contract_ids=user.contract_id
    )
    balance = balance.students[0].balance / 100
    
    phone = phonenumbers.parse(f"+7{profile.profile.phone}")

    current_date = datetime.today()
    age = current_date.year - data.birthdate.year
    if (current_date.month, current_date.day) < (data.birthdate.month, data.birthdate.day):
        age -= 1
        
    for children in profile.children:
        if children.last_name == data.lastname and children.first_name == data.firstname and children.middle_name == data.patronymic:
            school = children.school
            class_name = children.class_name

    text = "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n"
    text += f"üÜî <b>ID:</b> <code>{data.id}</code>\n"
    text += f"üìù <b>–ò–º—è:</b> <code>{data.firstname}</code>\n"
    text += f"üìú <b>–§–∞–º–∏–ª–∏—è:</b> <code>{data.lastname}</code>\n"
    text += f"üß¨ <b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> <code>{data.patronymic}</code>\n\n"

    text += f"‚úâÔ∏è <b>–ü–æ—á—Ç–∞:</b> <code>{profile.profile.email}</code>\n"
    text += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{phonenumbers.format_number(phone, phonenumbers.PhoneNumberFormat.INTERNATIONAL)}</code>\n"
    text += f"ü™™ <b>–°–ù–ò–õ–°:</b> <code>{data.snils[:3]}-{data.snils[3:6]}-{data.snils[6:9]}-{data.snils[9:]}</code>\n\n"
    
    text += f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> <code>{balance} ‚ÇΩ</code>\n\n"
    
    text += f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> <code>{data.birthdate.strftime('%d %B %Y')}</code>\n"
    text += f"üî¢ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> <code>{age}</code>\n\n"
    
    text += f"üè´ <b>–®–∫–æ–ª–∞:</b> <code>{school.short_name}</code>\n"
    text += f"üßë‚Äçüíº <b>–î–∏—Ä–µ–∫—Ç–æ—Ä:</b> <code>{school.principal}</code>\n"
    text += f"üìö <b>–ö–ª–∞—Å—Å:</b> <code>{class_name}</code>\n\n"
        
    return text


async def time_to_minutes(duration):
    if '—á.' in duration:
        hours, minutes = map(int, duration.split(" —á."))
        minutes += hours * 60
    else:
        minutes = int(duration) * 60
    return minutes


async def str_to_time(time_str):
    return datetime.strptime(time_str, "%H:%M")


async def minutes_to_time(duration_minutes):
    hours = duration_minutes // 60
    minutes = duration_minutes % 60
    return f"{hours} —á. {minutes} –º–∏–Ω."


@handle_api_error()
async def get_results(user_id, quarter):
    quarter = int(quarter) - 1
    
    api, user = await get_student(user_id)
    
    subjects = await api.get_subjects(
        student_id=user.student_id,
        profile_id=user.profile_id
    )
    
    global_marks = []
    max_marks_subject_name = ''
    max_marks_subject_amount = 0
    marks_by_grade = Counter()
    subject_data = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É

    for subject in subjects.payload:
        subject_marks_info = await api.get_subject_marks_for_subject(
            student_id=user.student_id,
            profile_id=user.profile_id,
            subject_name=subject.subject_name
        )
        
        subject_info = {
            'subject_name': f"{subject.subject_name}",
            'total_marks': 0,
            'frequent_grade': '–ù/–î',
            'marks_count': {}
        }
        
        if len(subject_marks_info.periods) >= 2:
            marks = [int(mark.value) for mark in subject_marks_info.periods[quarter].marks]
            subject_info['total_marks'] = len(marks)
            subject_info['frequent_grade'] = mode(marks)
            
            # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É
            subject_info['marks_count'] = dict(Counter(marks))
            marks_by_grade.update(marks)
            
            subject_info['mark'] = subject_marks_info.periods[quarter].value
            
            for mark in marks:
                global_marks.append(mark)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            if len(marks) > max_marks_subject_amount:
                max_marks_subject_name = subject.subject_name
                max_marks_subject_amount = len(marks)

            subject_data.append(subject_info)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–µ—Ç–≤–µ—Ä—Ç–∏
    periods_schedules = await api.get_periods_schedules(
        student_id=user.student_id,
        profile_id=user.profile_id,
        from_date=datetime(date.today().year, 9, 1),
        to_date=datetime(date.today().year + 1, 6, 1),
    )
    
    quarters = []  
    current_start = None  

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    sorted_schedules = sorted(periods_schedules, key=lambda x: x.date)

    for item in sorted_schedules:
        if item.type == 'vacation' or (item.type == 'holiday' and '–∫–∞–Ω–∏–∫' in item.title):
            if current_start:
                quarters.append((current_start, item.date - timedelta(days=1)))
                current_start = None
        elif item.type in ('workday', 'other'):
            if current_start is None:
                current_start = item.date

    if current_start:
        quarters.append((current_start, sorted_schedules[-1].date))
    
    homeworks_short = await api.get_homeworks_short(
        student_id=user.student_id,
        profile_id=user.profile_id,
        from_date=quarters[quarter][0],
        to_date=date.today(),
    )

    dates = [item.date for item in homeworks_short.payload]
    date_counts = Counter(dates)

    # –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞–Ω–∏–π
    most_homework_date, most_homework_count = max(date_counts.items(), key=lambda x: x[1])
    least_homework_date, least_homework_count = min(date_counts.items(), key=lambda x: x[1])
    
    avg_homework_count = int(median(list(date_counts.values())))


    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–µ—â–µ–Ω–∏—è—Ö
    visits = await api.get_visits(
        profile_id=user.profile_id,
        student_id=user.student_id,
        contract_id=user.contract_id,
        from_date=quarters[quarter][0],
        to_date=quarters[quarter][1],
    )

    # –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Å—É–º–º–∞—Ä–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –∑–∞ –¥–µ–Ω—å
    daily_durations = defaultdict(int)
    longest_day = None
    shortest_day = None
    earliest_in = None
    latest_out = None

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–µ—â–µ–Ω–∏—è
    for entry in visits.payload:
        date_ = entry.date
        for visit in entry.visits:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if '-' in visit.duration:
                continue
            # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–∑–∏—Ç–∞
            duration_minutes = await time_to_minutes(visit.duration.replace(" –º–∏–Ω.", ""))
            daily_durations[date_] += duration_minutes

            # –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ –∏ —É—Ö–æ–¥–∞
            in_time = await str_to_time(visit.in_)
            out_time = await str_to_time(visit.out)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏—Ö–æ–¥–∞—Ö –∏ —É—Ö–æ–¥–∞—Ö
            if not earliest_in or in_time < earliest_in["time"]:
                earliest_in = {"date": date_, "time": in_time}
            if not latest_out or out_time > latest_out["time"]:
                latest_out = {"date": date_, "time": out_time}

    # –ü–æ–∏—Å–∫ —Å–∞–º–æ–≥–æ –¥–æ–ª–≥–æ–≥–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –¥–Ω—è
    longest_day = max(daily_durations.items(), key=lambda x: x[1])
    shortest_day = min(daily_durations.items(), key=lambda x: x[1])
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å –∏—Ç–æ–≥–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    result = {
        'subjects': subject_data,
        'most_homework_date': most_homework_date,
        'most_homework_count': most_homework_count,
        'least_homework_date': least_homework_date,
        'least_homework_count': least_homework_count,
        'avg_homework_count': avg_homework_count,
        'total_grades': len(global_marks),
        'frequent_grade_overall': mode(global_marks),
        'most_resultive_subject': {
            'name': f"{max_marks_subject_name}",
            'marks_count': max_marks_subject_amount
        },
        'grades_count': dict(marks_by_grade),
        'longest_day': {
            'date': longest_day[0],
            'duration': longest_day[1]
        },
        'shortest_day': {
            'date': shortest_day[0],
            'duration': shortest_day[1]
        },
        'earliest_in': {
            'date': earliest_in["date"],
            'time': earliest_in["time"].strftime("%H:%M")
        },
        'latest_out': {
            'date': latest_out["date"],
            'time': latest_out["time"].strftime("%H:%M")
        }
    }

    return result
    

async def results_format(data, state, subject=None, quarter=None):
    marks_emoji = {
        5: "5Ô∏è‚É£",
        4: "4Ô∏è‚É£",
        3: "3Ô∏è‚É£",
        2: "2Ô∏è‚É£"
    }
    
    if state == 'subjects':
        subject_name = data['subjects'][subject]['subject_name']
        
        text = f"{await get_emoji_subject(subject_name)} <b>{subject_name}</b> ({quarter} —á–µ—Ç–≤–µ—Ä—Ç—å)\n"
        text += f'    üéì <i>–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫:</i> <span class="tg-spoiler">{data["subjects"][subject]["total_marks"]}</span>\n'
        text += f'    üèÖ <i>–°–∞–º–∞—è —á–∞—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞:</i> <span class="tg-spoiler">{data["subjects"][subject]["frequent_grade"]}</span>\n'
        text += f'    üìà <i>–ë–∞–ª–ª:</i> <span class="tg-spoiler">{data["subjects"][subject]["mark"]}</span>\n\n'
        text += f'    üìî <b>–û—Ü–µ–Ω–∫–∏:</b>\n'
        for grade, count in sorted(data["subjects"][subject]['marks_count'].items(), reverse=True):
            sticker = marks_emoji.get(grade, "üìä")
            text += f'         {sticker}: <span class="tg-spoiler">{count}</span>\n'
        
    elif state == 'overall_results':
        text = f"<b>–û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</b> ({quarter} —á–µ—Ç–≤–µ—Ä—Ç—å)\n"
        text += f'    üìù <i>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫:</i> <span class="tg-spoiler">{data["total_grades"]}</span>\n'
        text += f'    üèÖ <i>–°–∞–º–∞—è —á–∞—Å—Ç–∞—è –æ—Ü–µ–Ω–∫–∞:</i> <span class="tg-spoiler">{data["frequent_grade_overall"]}</span>\n'
        text += f'    üåü <i>–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫:</i> <span class="tg-spoiler">{await get_emoji_subject(data["most_resultive_subject"]["name"])} {data["most_resultive_subject"]["name"]} - {data["most_resultive_subject"]["marks_count"]}</span>\n\n'

        text += '    üìî <b>–û—Ü–µ–Ω–∫–∏:</b>\n'
        for grade, count in sorted(data['grades_count'].items(), reverse=True):
            sticker = marks_emoji.get(grade, "üìä")
            text += f'         {sticker}: <span class="tg-spoiler">{count}</span>\n'

        text += f'\n    üìà <i>–ë–æ–ª—å—à–µ –≤—Å–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:</i> <span class="tg-spoiler">{data["most_homework_date"].strftime("%d %B")} ({data["most_homework_count"]})</span>\n'
        text += f'    üìâ <i>–ú–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:</i> <span class="tg-spoiler">{data["least_homework_date"].strftime("%d %B")} ({data["least_homework_count"]})</span>\n'
        text += f'    üìä <i>–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è:</i> <span class="tg-spoiler">{data["avg_homework_count"]}</span>\n\n'
        
        text += f'    üïí <i>–°–∞–º—ã–π –¥–æ–ª–≥–∏–π –¥–µ–Ω—å:</i> <span class="tg-spoiler">{data["longest_day"]["date"].strftime("%d %B")} - {await minutes_to_time(data["longest_day"]["duration"])}</span>\n'
        text += f'    üìÖ <i>–°–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –¥–µ–Ω—å:</i> <span class="tg-spoiler">{data["shortest_day"]["date"].strftime("%d %B")} - {await minutes_to_time(data["shortest_day"]["duration"])}</span>\n'
        text += f'    ‚è∞ <i>–°–∞–º—ã–π —Ä–∞–Ω–Ω–∏–π –∑–∞—Ö–æ–¥:</i> <span class="tg-spoiler">{data["earliest_in"]["date"].strftime("%d %B")} - {data["earliest_in"]["time"]}</span>\n'
        text += f'    ‚è≥ <i>–°–∞–º—ã–π –ø–æ–∑–¥–Ω–∏–π —É—Ö–æ–¥:</i> <span class="tg-spoiler">{data["latest_out"]["date"].strftime("%d %B")} - {data["latest_out"]["time"]}</span>\n'

        
    return text 



@handle_api_error()
async def get_rating_rank_class(user_id):
    api, student = await get_student(user_id)
    profile = await api.get_family_profile(profile_id=student.profile_id)
    
    rating = await api.get_rating_rank_class(
        profile_id=student.profile_id,
        person_id=student.person_id,
        class_unit_id=profile.children[0].class_unit_id,
    )
    
    text = ""
    
    grouped = defaultdict(list)
    for user in rating:
        grouped[user.rank.average_mark_five].append(user)
        
    place_in_class = 0
    
    for avg_mark, users in sorted(grouped.items(), reverse=True):
        count = len(users)
        filled = int((avg_mark / 5) * 20)
        bar = f'{"‚ñá" * filled}{"‚ñÅ" * (20 - filled)}'

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–ª–∏–Ω–∞–º–∏
        place = str(users[0].rank.rank_place).rjust(2)
        avg_mark_str = f'{avg_mark:.2f}'.rjust(5)
        count_str = str(count)
        
        if users[0].person_id == student.person_id:
            place_in_class = users[0].rank.rank_place
            text += f'{place} {bar} {avg_mark_str} ({count_str} —á–µ–ª.) üåü\n'
        else:
            text += f'{place} {bar} {avg_mark_str} ({count_str} —á–µ–ª.)\n'
            
    return f"üìà –†–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–ª–∞—Å—Å—É (–í–∞—à–µ –º–µ—Å—Ç–æ: {place_in_class})\n<pre>{text}</pre>"